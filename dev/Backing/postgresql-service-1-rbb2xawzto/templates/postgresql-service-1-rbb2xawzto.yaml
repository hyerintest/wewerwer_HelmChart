apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ default "postgres" .Values.statefulset.name }}
  namespace: {{ .Values.namespace }}
imagePullSecrets:
  - name: turaco-harbor-registry
---
apiVersion: v1
type: Opaque
kind: Secret
metadata:
  name: {{ .Values.postgres.secret.name }}
  namespace: {{ .Values.namespace }}
data:
  root_password: {{ .Values.postgres.secret.root_password | toString | b64enc | quote }}
  username: {{ .Values.postgres.secret.username | toString | b64enc | quote }}
  password: {{ .Values.postgres.secret.password | toString | b64enc | quote }}
  database: {{ .Values.postgres.secret.database | toString | b64enc | quote }}
  dbhost: {{ .Values.postgres.secret.dbhost | toString | b64enc | quote }}
  port: {{ .Values.postgres.secret.port | toString | b64enc | quote }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ default "postgres" .Values.statefulset.name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.statefulset.replicas }}
  serviceName: {{ default "postgres" .Values.statefulset.spec.servicename }}
  selector:
    matchLabels:
      app: {{ default "postgres" .Values.statefulset.name }}
  template:
    metadata:
      labels:
        app: {{ default "postgres" .Values.statefulset.name }}
      annotations:
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "9090"
        prometheus.io/scheme: "http"
        prometheus.io/scrape: "true"
    spec:
      serviceAccount: {{ default "postgres" .Values.statefulset.name }}
      containers:
        - name: {{ default "postgres" .Values.statefulset.name }}
          image: {{ .Values.postgres.statefulset.image.url }}
          resources:
            requests:
              memory: {{ .Values.statefulset.resource.request.memory }}
              cpu: {{ .Values.statefulset.resource.request.cpu }}
            {{- if and (ne .Values.statefulset.resource.limits.memory "0Mi") (ne .Values.statefulset.resource.limits.memory "0Gi") }}
            limits:
              memory: {{ .Values.statefulset.resource.limits.memory }}
              cpu: {{ .Values.statefulset.resource.limits.cpu }}
            {{- end }}
          args:
            - '-c'
            - config_file=/etc/postgres.conf
            - '-c'
            - hba_file=/etc/pg_hba.conf
          env:
            - name: POSTGRESQL_VOLUME_DIR
              value: "/var/lib/postgresql/{{ .Values.statefulset.name }}"
            - name: PGDATA
              value: "/var/lib/postgresql/{{ .Values.statefulset.name }}/data"
            - name: POSTGRES_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secret.name }}
                  key: root_password
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secret.name }}
                  key: dbhost
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secret.name }}
                  key: database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secret.name }}
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ quote .Values.postgres.secret.name }}
                  key: password
          ports:
            - containerPort: {{ default "5432" .Values.statefulset.container.port }}
              protocol: TCP
          volumeMounts:
          - name: {{ .Values.pvc.name }}
            mountPath: /var/lib/postgresql/{{ .Values.statefulset.name }}
            subPath: postgres-db
          - name: {{ default "postgres-config" .Values.postgres.configmap.name }}
            mountPath: /etc/postgres.conf
            subPath: postgres.conf
          - name: {{ default "postgres-config" .Values.postgres.configmap.name }}
            mountPath: /etc/pg_hba.conf
            subPath: pg_hba.conf
      volumes:
        - name: {{ default "postgres-config" .Values.postgres.configmap.name }}
          configMap:
            name: {{ default "postgres-config" .Values.postgres.configmap.name }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.pvc.name }}
#        annotations:
#          volume.beta.kubernetes.io/storage-class: "{{ .Values.pvc.storageClass }}"
      spec:
        accessModes: [ "{{ .Values.pvc.accessMode }}" ]
        resources:
          requests:
            storage: {{ .Values.pvc.size }}
        storageClassName: {{ .Values.pvc.storageClass }}
---
kind: Service
apiVersion: v1
metadata:
  labels:
    app: {{ default "none" .Values.service.label }}
  name: {{ default "none" .Values.service.name }}
  namespace: {{ default "none" .Values.namespace }}
spec:
  ports:
    - name: {{ .Values.service.port.name }}
      port: {{ .Values.service.port.port }}
      targetPort: {{ .Values.service.port.targetPort }}
      protocol: {{ .Values.service.port.l4_protocol }}
  type: {{ index .Values.service.type 0 }}
  selector:
    app: {{ .Values.service.selector }}